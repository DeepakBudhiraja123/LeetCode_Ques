/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    // void createMap(vector<int> inorder, map<int,int> &mapping){
    //     for(int i = 0; i<inorder.size(); i++){
    //         mapping[inorder[i]] = i;
    //     }
    //     return;
    // }
    int FindPosition(vector<int> inorder, int element){
        for(int i = 0; i<inorder.size(); i++){
            if(inorder[i] == element){
                return i;
            }
        }
        return -1;
    }
    TreeNode* solve(vector<int> inorder, vector<int> postorder, int&index, int start , int end){
        if(start>end || index<0){
            return NULL;
        }
        int element = postorder[index--];
        TreeNode* root = new TreeNode(element);
        int position = FindPosition(inorder, element);
        
        root->right = solve(inorder, postorder, index, position+1, end);
        root->left = solve(inorder, postorder, index, start, position-1);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int index = inorder.size()-1;
        return solve(inorder, postorder, index, 0, postorder.size()-1);
    }
};
