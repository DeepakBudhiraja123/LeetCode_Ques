class Solution {
    int FindPivot(vector<int> &nums){
        int s = 0;
        int e = nums.size() - 1;
        int ans=-1;
        while(s<=e){
            int mid = (s+e)/2;
            if(nums[mid]>=nums[0]){
                ans=mid;
                s = mid+1;
            }
            else{
                e = mid-1;
            }
        }
        return ans;
    }
    int BinarySearch(vector<int> &nums, int s, int e, int target){
        int ans= -1;
        while(s<=e){
            
            int mid = (s+e)/2;
            cout<<"In Loop "<<mid<<endl;
            cout<<nums[mid]<<"  "<<target<<endl;
            if(nums[mid] == target){
                ans = mid;
                break;
            }
            else if(nums[mid]>target){
                e = mid -1;
            }
            else{
                s = mid + 1;
            }
        }
        return ans;
    }
public:
    int search(vector<int>& nums, int target) {
        int index = FindPivot(nums);
        cout<<index<<endl;
        int lindex = -1;
        int rindex = -1;
        if(nums[0]>target){
            return BinarySearch(nums, index+1, nums.size()-1, target);
        }
        else{
            return BinarySearch(nums, 0, index, target);
        }



    }
};
