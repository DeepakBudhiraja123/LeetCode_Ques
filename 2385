/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* Find(TreeNode* root, int start, map<TreeNode*, TreeNode*> &Parent){
        if(root == NULL){
            return NULL;
        }
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* node;
        while(!q.empty()){
            TreeNode* temp = q.front();
            q.pop();
            if(temp->val == start){
                node = temp;
            }
            if(temp->left){
                Parent[temp->left] = temp;
                q.push(temp->left);
            }
            if(temp->right){
                Parent[temp->right] = temp;
                q.push(temp->right);
            }
        }
        Parent[root] = NULL;
        return node;
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        map<TreeNode*, TreeNode*> Parent;
        TreeNode* node = Find(root, start, Parent);
        queue<TreeNode*> q;
        q.push(node);
        map<TreeNode*, bool> infected;
        infected[node] = true;
        int count = 0;
        while(!q.empty()){
            int size = q.size();
            bool was = false;
            for(int i = 0; i<size; i++){
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left && !infected[temp->left]){
                    was = true;
                    infected[temp->left] = true;
                    q.push(temp->left);
                }
                if(temp->right && !infected[temp->right]){
                    was = true;
                    infected[temp->right] = true;
                    q.push(temp->right);
                }
                if(Parent[temp] && !infected[Parent[temp]]){
                    was = true;
                    infected[Parent[temp]] = true;
                    q.push(Parent[temp]);
                }
            }
            if(was){
                count++;
            }
        }
        return count;
    }
};
