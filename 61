/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    int size(ListNode* head){
        int ans = 0;
        while(head !=NULL){
            ans++;
            head = head -> next; 
        }
        return ans;
    }
    ListNode* reverse(ListNode* head){
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* nextptr;
        while(curr!=NULL){
            nextptr = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextptr;
        }
        return prev;
    }
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == NULL){
            return head;
        }
        int length = size(head);
        while(length < k){
            k = k -length;
        }
        if(head == NULL || head->next == NULL || k == 0 || length == k){
            return head;
        }
        cout<<"here 1"<<endl;
        int n = length - k;
        ListNode* temp = head;
        n--;
        while(n!=0){
            cout<<"here "<<n<<endl;
            n = n-1;
            temp = temp->next;
        }
        cout<<"after loop 1"<<endl;
        ListNode* start = temp->next;
        ListNode* res = start;
        while(start->next !=NULL){
            start = start -> next;
        }
        temp->next = NULL;
        start->next = head;
        return res;
    }
};
