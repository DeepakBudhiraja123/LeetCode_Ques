class Solution {
    int FirstOccurence(vector<int> nums, int l, int h, int target){
        int ans = -1;
        while(l<=h){
            int mid = l + (h-l)/2;
            if(nums[mid] == target){
                ans = mid;
                h = mid -1;
            }
            else if(nums[mid]>target){
                h = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        return ans;
    }
    int LastOccurence(vector<int> nums, int l, int h, int target){
        int ans = -1;
        while(l<=h){
            int mid = l + (h-l)/2;
            if(nums[mid] == target){
                ans = mid;
                l = mid + 1;
            }
            else if(nums[mid]>target){
                h = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        return ans;
    }
    vector<int> answer;
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        answer.push_back(FirstOccurence(nums, 0, nums.size()-1, target));
        answer.push_back(LastOccurence(nums, 0, nums.size()-1, target));
        return answer;
    }
};
